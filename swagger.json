{
  "openapi": "3.0.0",
  "info": {
    "title": "Pet Support API",
    "description": "Pet Support project backend service",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://pet-support.onrender.com",
      "description": "production server"
    },
    {
      "url": "http://localhost:3000",
      "description": "local server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "User authorization endpoints"
    },
    {
      "name": "Users",
      "description": "Users manage endpoints"
    },
    {
      "name": "News",
      "description": "News manage endpoints"
    },
    {
      "name": "Services",
      "description": "Services manage endpoints"
    },
    {
      "name": "Notices",
      "description": "Notices manage endpoints"
    },
    {
      "name": "Pets",
      "description": "Pets manage endpoints"
    }
  ],
  "paths": {
    "/api/news/": {
      "get": {
        "tags": [
          "News"
        ],
        "summary": "Get News",
        "description": "Get a list of news",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to get news. Default is 1.",
            "required": false,
            "minimum": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of news per page. Default is 6.",
            "required": false,
            "minimum": 1,
            "maximum": 100,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of news",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/News"
                },
                "example": {
                  "id": "615ec59c5bafc50b9a0c3f96",
                  "title": "Example News Article 1",
                  "url": "https://example.com/news/article1",
                  "description": "This is an example news article.",
                  "date": "2021-10-07T00:00:00.000Z"
                }
              }
            }
          }
        }
      }
    },
    "/api/friends/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registration",
        "description": "Creates a new user",
        "parameters": [],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "user": {
                    "id": "63ef667fc42e9578d819c035",
                    "email": "Jhon.Doe@example.com",
                    "name": "Jhon Doe"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Email in use"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              },
              "example": {
                "email": "Jhon.Doe@example.com",
                "password": "password_example",
                "name": "Jhon Doe",
                "city": "Limburg, Netherlands",
                "phone": "+31-77-2065000"
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "description": "Authorizes the user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User login successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizedUser"
                },
                "example": {
                  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZjIxYTJkOTFlNTY3NzQyMzRkMWM0MCIsImlhdCI6MTY3NjgxMDgxN30.55lDbmtnFbdymuZKWHo_tTudKym1APGsCDSb7XFlIVQ",
                  "user": {
                    "id": "63ef667fc42e9578d819c035",
                    "email": "Jhon.Doe@example.com",
                    "name": "Jhon Doe"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email not verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Email not verified"
                }
              }
            }
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Email or password is wrong"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              },
              "example": {
                "email": "Jhon.Doe@example.com",
                "password": "password_example"
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "description": "Terminates the user session",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User logout successfully"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/auth/verify/{verificationToken}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Token verification",
        "description": "Verifies the token via email letter link",
        "parameters": [
          {
            "name": "verificationToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Verification token"
          }
        ],
        "responses": {
          "200": {
            "description": "Verification successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Result detail",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Verification successful"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Email verification",
        "description": "Sends a verification letter to the user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Verification email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Result detail",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Verification email sent"
                }
              }
            }
          },
          "400": {
            "description": "Verification has already been passed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Verification has already been passed"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Not found"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ]
              },
              "example": {
                "email": "Jhon.Doe@example.com"
              }
            }
          }
        }
      }
    },
    "/api/users/update": {
      "patch": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/users/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      }
    },
    "/api/notices/own": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      }
    },
    "/api/notices/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/notices/{noticesId}": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "noticesId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      },
      "get": {
        "tags": [
          "Notices"
        ],
        "summary": "Get Notice by ID",
        "description": "Returns a notice with the given ID",
        "parameters": [
          {
            "name": "noticesId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the notice to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Notices by category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notice"
                },
                "example": {
                  "id": "63f2365f415a80342defc8ea",
                  "announcement": "sell",
                  "name": "r2d2",
                  "birthday": "",
                  "breed": "",
                  "location": "",
                  "price": "",
                  "image": "https://res.cloudinary.com/datobb5og/image/upload/v1676818015/vzymfd8ezu0giqzezrab.jpg",
                  "comments": "",
                  "owner": "63f230f17079f0b526f60bcf"
                }
              }
            }
          },
          "404": {
            "description": "Notice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Notice not found"
                }
              }
            }
          }
        }
      }
    },
    "/api/notices/{category}": {
      "get": {
        "tags": [
          "Notices"
        ],
        "summary": "Get Notices by Category",
        "description": "Get all notices by category",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Category name"
          }
        ],
        "responses": {
          "200": {
            "description": "Notices by category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notices"
                },
                "example": {
                  "id": "63f2365f415a80342defc8ea",
                  "announcement": "sell",
                  "name": "r2d2",
                  "birthday": "",
                  "breed": "",
                  "location": "",
                  "price": "",
                  "image": "https://res.cloudinary.com/datobb5og/image/upload/v1676818015/vzymfd8ezu0giqzezrab.jpg",
                  "comments": "",
                  "owner": "63f230f17079f0b526f60bcf"
                }
              }
            }
          },
          "404": {
            "description": "Notices not found for category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Notices not found for category"
                }
              }
            }
          }
        }
      }
    },
    "/api/notices/favorites": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      }
    },
    "/api/notices/favorite/{noticesId}": {
      "patch": {
        "description": "",
        "parameters": [
          {
            "name": "noticesId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "noticesId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      }
    },
    "/api/pets/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/pets/{petId}": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      }
    }
  },
  "components": {
    "schemas": {
      "NewUser": {
        "type": "object",
        "description": "User data",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "password": {
            "type": "string",
            "description": "Password"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "city": {
            "type": "string",
            "description": "City, region"
          },
          "phone": {
            "type": "string",
            "description": "Phone number"
          }
        },
        "required": [
          "email",
          "password",
          "name",
          "city",
          "phone"
        ]
      },
      "User": {
        "type": "object",
        "description": "User data",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique user ID"
              },
              "email": {
                "type": "string",
                "description": "Email address"
              },
              "name": {
                "type": "string",
                "description": "Name"
              }
            }
          }
        }
      },
      "AuthorizedUser": {
        "type": "object",
        "description": "User data",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique user ID"
              },
              "email": {
                "type": "string",
                "description": "Email address"
              },
              "name": {
                "type": "string",
                "description": "Name"
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "Error detail",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "name": "Bearer Authentication",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}